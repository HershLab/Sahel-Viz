joined <- merge(y = soparc_sum, x = demo,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Latino") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Latino_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="White") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('White_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Asian") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Asian_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Black") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Black_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Other") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Other_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
filtered <- joined %>% filter(!is.na(physical_activity))
View(filtered)
View(filtered)
mod1 <- lm(physical_activity~TOTAL_C+intersect_Median_Income,data=filtered)
summary(mod1)
plot(mod1)
names(filtered)
mod1 <- lm(physical_activity~TOTAL_C+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~TOTAL_C+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~PC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~VC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~PC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~TOTAL_C+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~PC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~VC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
names(filtered)
mod1 <- lm(physical_activity~TOTAL_C+intersect_Median_Income+intersect_Moved_One_To_Four+intersect_Renter,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four+intersect_Renter,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~PC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four+intersect_Renter,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~VC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four+intersect_Renter,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four+intersect_Renter,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four+intersect_Renter,data=filtered)
summary(mod1)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
names(filtered)
mod2 <- lm(physical_activity~AC_COUN+intersect_Median_Income+pcnt_intersect_Hispanic+pcnt_intersect_White+pcnt_intersect_Black+
pcnt_intersect_Asian,data=filtered)
summary(mod2)
mod2 <- lm(physical_activity~AC_COUN+intersect_Median_Income+pcnt_intersect_Hispanic,data=filtered)
summary(mod2)
mod2 <- lm(physical_activity~AC_COUN+intersect_Median_Income+pcnt_intersect_White,data=filtered)
summary(mod2)
mod2 <- lm(physical_activity~AC_COUN+intersect_Median_Income+pcnt_intersect_Asian,data=filtered)
summary(mod2)
names(filtered)
library(olsrr)
ols_plot_cooksd_bar(mod2)
library(sandwich)
library(lmtest)
sqrt(diag(vcovHC(mod2)))
coeftest(mod1, vcov=vcovHC)
ols_plot_cooksd_bar(mod1)
sqrt(diag(vcovHC(mod1)))
coeftest(mod1, vcov=vcovHC)
fitMM <- rlm(physical_activity~AC_COUN+intersect_Median_Income+pcnt_intersect_Asian,data=filtered,k2 = 1.345)
library(MASS)
fitMM <- rlm(physical_activity~AC_COUN+intersect_Median_Income+pcnt_intersect_Asian,data=filtered,k2 = 1.345)
summary(fitMM)
#https://stats.stackexchange.com/questions/83826/is-a-weighted-r2-in-robust-linear-model-meaningful-for-goodness-of-fit-analys
#https://rpubs.com/dvallslanaquera/robust_regression
r2 <- function(x){
SSe <- sum((x$resid)^2);
observed <- x$resid+x$fitted;
SSt <- sum((observed-mean(observed))^2);
value <- 1-SSe/SSt;
return(value);
}
r2(fitMM)
#how to get pvals
f.robftest(fitMM, var = "intersect_Median_Income")
library(sfsmisc)
#how to get pvals
f.robftest(fitMM, var = "intersect_Median_Income")
#how to get pvals
f.robftest(fitMM, var = "AC_COUN")
intersect_Median_Income
summary(fitMM)
fitMM <- rlm(physical_activity~AC_COUN+intersect_Median_Income,data=filtered,k2 = 1.345)
summary(fitMM)
#https://stats.stackexchange.com/questions/83826/is-a-weighted-r2-in-robust-linear-model-meaningful-for-goodness-of-fit-analys
#https://rpubs.com/dvallslanaquera/robust_regression
r2 <- function(x){
SSe <- sum((x$resid)^2);
observed <- x$resid+x$fitted;
SSt <- sum((observed-mean(observed))^2);
value <- 1-SSe/SSt;
return(value);
}
r2(fitMM)
#how to get pvals
f.robftest(fitMM, var = "intersect_Median_Income")
#how to get pvals
f.robftest(fitMM, var = "AC_COUN")
View(soparc)
source('~/gis/che-lab/San Jose/soparc.R', echo=TRUE)
View(filtered)
pov_mod <- lm(physical_activity~AC_COUN+pcnt_intersect_Pop_Below_Pov+intersect_Moved_One_To_Four,data=filtered)
summary(pov_mod)
names(filtered)
pov_mod <- lm(physical_activity~AC_COUN+intersect_Pop_Below_Pov+intersect_Moved_One_To_Four,data=filtered)
summary(pov_mod)
mod1 <- lm(physical_activity~AC_COUN+intersect_Median_Income+intersect_Moved_One_To_Four,data=filtered)
summary(mod1)
mod2 <- lm(physical_activity~TOTAL_C+intersect_Median_Income,data=filtered)
summary(mod2)
library(foreign)
library(tidyverse)
library(olsrr)
library(sandwich)
library(lmtest)
library(MASS)
library(sfsmisc)
soparc <- read.spss('G:/My Drive/Health and Space Lab/San Jose/CombinedDBs/MasterPARASOPARCDB01102019LD.sav', to.data.frame=TRUE)
pss2date <- function(x) as.Date(x/86400, origin = "1582-10-14")
soparc <- soparc %>% mutate(Date= pss2date(Date))
demo <-read.csv('C:/Users/elmsc/Documents/gis/che-lab/San Jose/output/csv/hm_gpd.csv')
soparc$ParkNumber <- as.character(soparc$ParkNumber)
soparc$ParkNumber[soparc$ParkNumber %in% "Frenak M. Santana Park"] <- "Frank M. Santana Park"
soparc$ParkNumber[soparc$ParkNumber %in% "Willow Street Frank Bramhall"] <- "Willow Street Frank Bramhall Park"
soparc$ParkNumber[soparc$ParkNumber %in% "Cimarron Park"] <- "Cimarron Park\n"
soparc_sum <- data.frame(soparc %>% filter(Empty=="No") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('physical_activity'='n')
joined <- merge(y = soparc_sum, x = demo,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Latino") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Latino_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="White") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('White_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Asian") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Asian_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Black") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Black_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Other") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Other_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
filtered <- joined %>% filter(!is.na(physical_activity))
View(filtered)
crimes <-read.csv('C:/Users/elmsc/Documents/gis/che-lab/San Jose/output/csv/hm_crimes_gpd.csv')
View(crimes)
joined <- merge(x = filtered,y = crimes, by.x='Name',by.y='Name', all.x = TRUE)
View(joined)
joined[24:63]
names(joined)
joined <- joined %>% replace_na(0)
joined[is.na(joined)] <- 0
View(joined)
joined[24:63]
joined[10:38]
is.numeric(joined)
select_if(joined, is.numeric)
mod3 <- lm(physical_activity ~ ., data = select_if(joined, is.numeric))
ols_step_both_p(mod3)
summary(mod3)
View(joined)
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:100], is.numeric))
ols_step_both_p(mod3)
summary(mod3)
View(joined)
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:15], is.numeric))
ols_step_both_p(mod3)
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:15], is.numeric))
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:20], is.numeric))
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:30], is.numeric))
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:50], is.numeric))
ols_step_both_p(mod3)
ols_step_both_p(mod3)
summary(mod3)
View(joined)
mod3 <- lm(physical_activity ~ ., data = select_if(joined[53:100], is.numeric))
joined <- joined[10:53]
View(joined)
joined <- subset(joined, select = -c('Latino_Visitors', 'White_Visitors','Asian_Visitors', 'Black_Visitors', 'Other_Visitors'))
joined <- subset(joined, select = -c(Latino_Visitors, White_Visitors,Asian_Visitors, Black_Visitors, Other_Visitors))
View(joined)
joined <- joined[10:49]
crimes <-read.csv('C:/Users/elmsc/Documents/gis/che-lab/San Jose/output/csv/hm_crimes_gpd.csv')
joined <- merge(x = filtered,y = crimes, by.x='Name',by.y='Name', all.x = TRUE)
joined[is.na(joined)] <- 0
joined <- joined %>% replace_na(0)
joined <- joined[10:49]
View(joined)
library(foreign)
library(tidyverse)
library(olsrr)
library(sandwich)
library(lmtest)
library(MASS)
library(sfsmisc)
soparc <- read.spss('G:/My Drive/Health and Space Lab/San Jose/CombinedDBs/MasterPARASOPARCDB01102019LD.sav', to.data.frame=TRUE)
pss2date <- function(x) as.Date(x/86400, origin = "1582-10-14")
soparc <- soparc %>% mutate(Date= pss2date(Date))
demo <-read.csv('C:/Users/elmsc/Documents/gis/che-lab/San Jose/output/csv/hm_gpd.csv')
soparc$ParkNumber <- as.character(soparc$ParkNumber)
soparc$ParkNumber[soparc$ParkNumber %in% "Frenak M. Santana Park"] <- "Frank M. Santana Park"
soparc$ParkNumber[soparc$ParkNumber %in% "Willow Street Frank Bramhall"] <- "Willow Street Frank Bramhall Park"
soparc$ParkNumber[soparc$ParkNumber %in% "Cimarron Park"] <- "Cimarron Park\n"
soparc_sum <- data.frame(soparc %>% filter(Empty=="No") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('physical_activity'='n')
joined <- merge(y = soparc_sum, x = demo,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Latino") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Latino_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="White") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('White_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Asian") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Asian_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Black") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Black_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
soparc_sum <- data.frame(soparc %>% filter(Ethnicity=="Other") %>% group_by(ParkNumber) %>% count())
soparc_sum <- soparc_sum %>% rename('Other_Visitors'='n')
joined <- merge(y = soparc_sum, x = joined,by.y='ParkNumber', by.x='Name', all.x = TRUE)
filtered <- joined %>% filter(!is.na(physical_activity))
crimes <-read.csv('C:/Users/elmsc/Documents/gis/che-lab/San Jose/output/csv/hm_crimes_gpd.csv')
joined <- merge(x = filtered,y = crimes, by.x='Name',by.y='Name', all.x = TRUE)
joined[is.na(joined)] <- 0
joined[10:38]
joined <- joined[10:40]
View(joined)
joined <- merge(x = filtered,y = crimes, by.x='Name',by.y='Name', all.x = TRUE)
joined[is.na(joined)] <- 0
joined <- joined[10:39]
View(joined)
mod3 <- lm(physical_activity ~ ., data = select_if(joined, is.numeric))
ols_step_both_p(mod3)
summary(mod3)
joined <- merge(x = filtered,y = crimes, by.x='Name',by.y='Name', all.x = TRUE)
joined[is.na(joined)] <- 0
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:39], is.numeric))
ols_step_both_p(mod3)
View(demo)
View(joined)
crime_joined <- joined %>% select(physical_activity)
crime_joined <- joined %>% subset(select(physical_activity))
crime_joined <- subset(joined, select = c(physical_activity))
View(crime_joined)
joined[39]
joined[45]
View(joined)
joined[53]
joined[53:139]
crime_joined <- rbind(crime_joined,joined[53:139])
crime_joined <- cbind(crime_joined,joined[53:139])
View(crime_joined)
mod4 <- lm(physical_activity ~ ., data = crime_joined)
ols_step_both_p(mod4)
View(crime_joined)
mod3 <- lm(physical_activity ~ ., data = select_if(joined[10:39], is.numeric))
ols_step_both_p(mod3)
demo_mod <- lm(physical_activity ~ intersect_Median_Income+pcnt_intersect_Pop_Below_Pov, data = select_if(joined[10:39], is.numeric))
summary(demo_mod)
crime_joined <- cbind(crime_joined,joined[10:38])
mod4 <- lm(physical_activity ~ ., data = crime_joined)
ols_step_both_p(mod4)
ols_step_both_p(mod3)
ols_step_both_p(mod4)
mod4 <- lm(physical_activity ~ ., data = crime_joined)
ols_step_both_p(mod4)
ols_step_forward_p(mod4)
View(crime_joined)
demo_mod <- lm(physical_activity ~ intersect_Median_Income+pcnt_intersect_Pop_Below_Pov, data = select_if(joined[10:39], is.numeric))
summary(demo_mod)
View(crime_joined)
names(crime_joined)
mod4 <- lm(physical_activity ~ intersect_Median_Income+pcnt_intersect_Pop_Below_Pov+NARCOTICS, data = crime_joined)
crime_mod <- lm(physical_activity ~ intersect_Median_Income+pcnt_intersect_Pop_Below_Pov+NARCOTICS, data = crime_joined)
summary(crime_mod)
crime_mod <- lm(physical_activity ~ intersect_Median_Income+pcnt_intersect_Pop_Below_Pov+PC_COUN.x, data = crime_joined)
summary(crime_mod)
crime_mod <- lm(physical_activity ~ intersect_Median_Income+pcnt_intersect_Pop_Below_Pov+TOTAL_C.x, data = crime_joined)
summary(crime_mod)
View(crime_joined)
exp(5)
exp(.80404)
?exp
library(tmap)
library(sf)
library(tidyverse)
setwd('C:/Users/elmsc/Documents/gis/hersh/Sahel-ID')
comparison_map <- function(x,y,name) {
country <- aoi %>% filter(COUNTRY == name)
map_lights <- tm_shape(country) + tm_polygons(col = "NIGHT_LIGH", style = "jenks", title = "Night Lights")
map_lights <- map_lights + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map_data <- tm_shape(country) + tm_polygons(col = "DATA_PER_1000", style = "jenks", title = "Data per 1000 People")
map_data <- map_data + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map <- tmap_arrange(map_lights, map_data)
map
tmap_save(map, filename = paste0("output/", name, ".png"))
}
make_single_map <- function(x,y,name,col,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_polygons(col = col, style = "jenks", title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name,"i", col, ".png"))
}
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_polygons(col = col, n=2,labels = labels, title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
sahel_loc <- 'G:/.shortcut-targets-by-id/1ihZCdFkFKljvEUetC8IiiE7JEDSGKA4J/hersh_lab/sahel/'
aoi <- st_read(paste0(sahel_loc,'combined/shp/sahel.shp'))
aoi <- aoi %>% mutate(DATA_PER_1000 = total/POPULATION*1000,
NO_DATA = case_when(total == 0 ~ 0, TRUE ~ 1))
sahel_loc <- 'G:/.shortcut-targets-by-id/1ihZCdFkFKljvEUetC8IiiE7JEDSGKA4J/hersh_lab/sahel/'
aoi <- st_read(paste0(sahel_loc,'combined/shp/sahel.shp'))
aoi <- aoi %>% mutate(DATA_PER_1000 = total/POPULATION*1000,
NO_DATA = case_when(total == 0 ~ 0, TRUE ~ 1))
countries <-  unique(aoi$COUNTRY)
countries
make_single_map_binary("left", "top", "Benin", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_polygons(col = col, n=2,labels = labels, title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
setwd('C:/Users/elmsc/Documents/gis/hersh/Sahel-Viz')
comparison_map <- function(x,y,name) {
country <- aoi %>% filter(COUNTRY == name)
map_lights <- tm_shape(country) + tm_polygons(col = "NIGHT_LIGH", style = "jenks", title = "Night Lights")
map_lights <- map_lights + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map_data <- tm_shape(country) + tm_polygons(col = "DATA_PER_1000", style = "jenks", title = "Data per 1000 People")
map_data <- map_data + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map <- tmap_arrange(map_lights, map_data)
map
tmap_save(map, filename = paste0("output/", name, ".png"))
}
make_single_map <- function(x,y,name,col,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_polygons(col = col, style = "jenks", title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name,"i", col, ".png"))
}
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_polygons(col = col, n=2,labels = labels, title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Senegal", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Togo","NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Niger", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Mauritania", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Mali", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "bottom", "Guinea", "NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Cote dlvoire","NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Chad","NO_DATA", c("No Data Available", "Data Available"), "Data Availibility")
View(aoi)
aoi <- aoi %>% mutate(DATA_PER_1000 = total/POPULATION*1000,
DATA_AVAILABILITY = case_when(total > 0 ~ 1, TRUE ~ 0))
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
View(aoi)
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility2")
make_single_map <- function(x,y,name,col,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_polygons(col = col, style = "cat", title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name,"i", col, ".png"))
}
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility2")
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_fill(col = col, style = "cat", labels = labels, title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
map <- tm_shape(country.bound) + tm_fill(col = col, style = "cat", labels = labels, title = title)
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country.bound) + tm_fill(col = col, style = "cat", labels = labels, title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_polygons(col = col, style = "cat", labels = labels, title = title)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
aoi <- aoi %>% mutate(DATA_AVAILABILITY = factor(DATA_AVAILABILITY))
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_fill(col = col, style = "cat", labels = labels, title = title) + tm_borders()
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_fill(col = col, style = "cat",palette="Paired", labels = labels, title = title) + tm_borders()
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
tmaptools::palette_explorer()
install.packages("shiny")
install.packages("shiny")
tmaptools::palette_explorer()
install.packages("shinyjs")
tmaptools::palette_explorer()
tmaptools::palette_explorer()
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_fill(col = col, style = "cat",palette="Set1", labels = labels, title = title) + tm_borders()
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
library(tmap)
library(sf)
library(tidyverse)
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_fill(col = col, style = "cat",palette="Set1", labels = labels, title = title) + tm_borders()
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
tmaptools::palette_explorer()
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_fill(col = col, style = "cat",palette="Set1", labels = labels, title = title) + tm_borders(lwd = 1.5)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
map <- tm_shape(country) + tm_fill(col = col, style = "cat",palette="Set1", labels = labels, title = title) + tm_borders(col = "black",lwd = 1.5)
make_single_map_binary <- function(x,y,name,col,labels,title) {
country <- aoi %>% filter(COUNTRY == name)
map <- tm_shape(country) + tm_fill(col = col, style = "cat",palette="Set1", labels = labels, title = title) + tm_borders(col = "black",lwd = 1.5)
map <- map + tm_layout(scale = 1, frame = FALSE) + tm_legend(legend.position = c(x, y))
map
tmap_save(map, filename = paste0("output/", name, "-", col, ".png"))
}
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Benin", "DATA_AVAILABILITY", c("Data Available","No Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Burkina Faso", "DATA_AVAILABILITY", c("No Data Available","Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Senegal", "DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Togo","DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Niger", "DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Mauritania", "DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "top", "Mali", "DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("left", "bottom", "Guinea", "DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Cote dlvoire","DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
make_single_map_binary("right", "top", "Chad","DATA_AVAILABILITY", c("No Data Available", "Data Available"), "Data Availibility")
